//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::user_history::Entity")]
    UserHistory,
    #[sea_orm(has_one = "super::user_info::Entity")]
    UserInfo,
    #[sea_orm(has_one = "super::user_logs::Entity")]
    UserLogs,
    #[sea_orm(has_many = "super::user_portrait::Entity")]
    UserPortrait,
    #[sea_orm(has_one = "super::user_roles::Entity")]
    UserRoles,
    #[sea_orm(has_many = "super::wish_list::Entity")]
    WishList,
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::user_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserHistory.def()
    }
}

impl Related<super::user_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserInfo.def()
    }
}

impl Related<super::user_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLogs.def()
    }
}

impl Related<super::user_portrait::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPortrait.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl Related<super::wish_list::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WishList.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
